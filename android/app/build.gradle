// def localProperties = new Properties()
// def localPropertiesFile = rootProject.file('local.properties')
// if (localPropertiesFile.exists()) {
//     localPropertiesFile.withReader('UTF-8') { reader ->
//         localProperties.load(reader)
//     }
// }

// def flutterRoot = localProperties.getProperty('flutter.sdk')
// if (flutterRoot == null) {
//     throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
// }

// def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
// if (flutterVersionCode == null) {
//     flutterVersionCode = '1'
// }

// def flutterVersionName = localProperties.getProperty('flutter.versionName')
// if (flutterVersionName == null) {
//     flutterVersionName = '1.0'
// }

// def keystoreProperties = new Properties()
// def keystorePropertiesFile = rootProject.file('key.properties')
// if (keystorePropertiesFile.exists()) {
//     keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// }

// apply plugin: 'com.android.application'
// apply plugin: 'kotlin-android'
// apply plugin: 'com.google.gms.google-services'
// apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// android {
//     namespace "com.irootsm.st_thomas"
//     compileSdkVersion 33
//     ndkVersion flutter.ndkVersion
    

//     compileOptions {
//         sourceCompatibility JavaVersion.VERSION_1_8
//         targetCompatibility JavaVersion.VERSION_1_8
//     }

//     kotlinOptions {
//         jvmTarget = '1.8'
//     }

//     sourceSets {
//         main.java.srcDirs += 'src/main/kotlin'
//     }

//     defaultConfig {
//         applicationId "com.irootsm.st_thomas"
//         minSdkVersion 23
//         targetSdkVersion 34
//         versionCode flutterVersionCode.toInteger()
//         versionName flutterVersionName
//         multiDexEnabled true

//     }

//     signingConfigs {
//         release {
//             file("keystore/key.properties").with { propFile ->
//                 if (propFile.canRead()) {
//                     def properties = new Properties()
//                     properties.load(new FileInputStream(propFile))
//                     storeFile file("keystore/${properties['storeFile']}")
//                     storePassword properties['storePassword']
//                     keyAlias properties['keyAlias']
//                     keyPassword properties['keyPassword']
//                 } else {
//                     println "Unable to read signing.properties"
//                 }
//             }
//         }
//     }

//     buildTypes {
//         release {
//             // TODO: Add your own signing config for the release build.
//             // Signing with the debug keys for now, so `flutter run --release` works.
//             signingConfig signingConfigs.debug
//         }
//     }
// }

// flutter {
//     source '../..'
// }

// dependencies {
//     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//     implementation platform('com.google.firebase:firebase-bom:31.5.0')
//     implementation 'com.google.firebase:firebase-messaging:23.4.0'
//     implementation 'com.google.firebase:firebase-analytics'
//     implementation 'com.android.support:multidex:2.0.1'
// }

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode', '1').toInteger()
def flutterVersionName = localProperties.getProperty('flutter.versionName', '1.0')

def keystoreProperties = new Properties()
def keystoreFile = rootProject.file("keystore/key.properties")
if (keystoreFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystoreFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.irootsm.st_thomas"  // ✅ Ensure namespace is set to avoid build failure
    compileSdkVersion 34  // ✅ Updated to latest SDK version

    ndkVersion localProperties.getProperty('flutter.ndkVersion', '25.1.8937393') // ✅ Safe fallback NDK version

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.irootsm.st_thomas"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        versionCode flutterVersionCode
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {

                release {
            file("keystore/key.properties").with { propFile ->
                if (propFile.canRead()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file("keystore/${properties['storeFile']}")
                    storePassword properties['storePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                } else {
                    println "Unable to read signing.properties"
                }}}
        // release {
        //     if (keystoreFile.exists()) {  // ✅ Prevent build failure if key.properties is missing
        //         storeFile file(keystoreProperties['storeFile'])
        //         storePassword keystoreProperties['storePassword']
        //         keyAlias keystoreProperties['keyAlias']
        //         keyPassword keystoreProperties['keyPassword']
        //     }
        // }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release  // ✅ Use release signing config
            minifyEnabled false  // ⚠️ Set to true for ProGuard in production
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:31.5.0')
    implementation 'com.google.firebase:firebase-messaging:23.4.0'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.multidex:multidex:2.0.1'  // ✅ Updated to latest androidx.multidex
}
